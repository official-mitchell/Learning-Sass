
Within the folder with your sass.scss, main.css.map, and main.css
you can do: ```sass scss.scss:scss.css``` in terminal to process...

// Notes:
// "last trailing semicolon" is the last semi colon in the values series for a an object or something
// @ the ampersand leads to directives

// #############################################################################
// Variables
// #############################################################################

$black: #333;
$pale: #d2e1dd;
$pink: #c69;
$blue: #036;

$font-stack: 'Georgia', serif;
$font-size: 14px;

// #############################################################################
// Nesting
// #############################################################################

// generally avoid comments... but here is a good way to do compact classes
.block div { border: 1px solid black; }
.block div ul { width: 100%; float: left; }
.block div ul li { float: left; width: 100%; background: orange; }
.block div ul li p { font-weight: bold; line-height: 1.5em; }

.block {                /* .block opening bracket */
    div {                 /* div opening bracket */
      border: 1px solid black;
      ul {                /* ul opening bracket */
        width: 100%;
        float: left;
        li {              /* li opening bracket */
          float: left;
          width: 100%;
          background: orange;
          p {             /* p opening bracket */
            font-weight: bold;
            line-height: 1.5em;
          }               /* p closing bracket */
        }                 /* li closing bracket */
      }                   /* ul closing bracket */
    }                     /* div closing bracket */
  }                       /* .block closing bracket */

// #############################################################################
// Sass Functions
// #############################################################################


// #############################################################################
// Mixins
// #############################################################################

// 1.
// placement of mixins has a direct impact on the cascade of output CSS. 
// place them after declaring the selector

.foo {
    @include transition(all, 0.6s, ease);
    background-color: orange;
    width: 50%;
    .nested-foo {
      width: 25%;
      margin: 0 auto;
    }
  }

  
// 2. 

@mixin text-format($size, $family, $color) {
    font: {
      size: $size;
      family: $family;
    };
    color: $color;
  }
  
  .site-header {
    @include text-format(12px, verdana, red);
  }
  
  
// #############################################################################
// Extended selectors
// #############################################################################
// Extends do not accept arguments and do not inject code, extended selectors are modified in place of origin by appending the "extended selector"

// where did the @include come from?

  // Style class object
.default_gray_border {
    @include border-radius(25px);
    border: 1px solid gray;
  }
// Semantically named class
.promoters_box {
@extend .default_gray_border; /*extended selector */
}
 
        // Output CSS
        .default_gray_border, .promoters_box {  // notice the chained selectors
            -webkit-border-radius: 25px;
            -moz-border-radius: 25px;
            border-radius: 25px;
            border: 1px solid gray;
        }

        
  
  
  
  

// Example Project

    // 1. Variables

        // demonstrating the concept of variables and value


        // $mycolor: white;

        // body {
        //     background-color: $mycolor;
        // }

        // create variables 

        // start with a "sass map" below.
        
        $colors: (
            primary: navy,
            primary-light: lighten(navy, 40%), // using the lighten() function
            primary-dark: darken(navy, 40%), // using the lighten() function
            accent: gold
        ); 

        // notice the comma between key value pairs
        // notice the parentheses
        
        @function color($color-name) {
            @return map-get($colors, $color-name);
        }
        
        // use the @return as a proxy[
        
        
        // 2. new variables  here
        $padding: 15px;
        $borders: 15px;
        
        
        $desktop: 840px; // news desktop 
        
        @mixin desktop { // function doing 
            @media (min-width: #{$desktop}) {
                @content;
            }
            
            
            
        }
        
        
        body, html {
            height: 100%;
        }
        

        body {
            font-family: 'Montserrat';
            margin: 0;
            // background-color: map-get($colors, primary);
            
            #swedenbg {
                clip-path: polygon(7% 0, 94% 0, 100% 13%, 100% 89%, 94% 99%, 7% 100%, 0 89%, 0 12%);
                background-color: map-get($colors, primary);
                width: 100%;
                height: 100%;
                position: absolute; // keeps it in place
                z-index: -10; // keeps it in background
            }
            
            #swedenbg2 {
                clip-path: polygon(0 23%, 15% 23%, 15% 0, 30% 0, 30% 23%, 100% 23%, 100% 68%, 30% 67%, 30% 100%, 15% 100%, 15% 67%, 0 67%);
                background-color: map-get($colors, accent);
                width: 100%;
                height: 100%;
                position: absolute;
                z-index: -1
            }
            
            #bg {
                clip-path: polygon(100% 0, 100% 100%, 42% 100%, 68% 44%, 43% 0);
                background-color: map-get($colors, primary);
                width: 100%;
                height: 100%;
                position: absolute; // keeps it in place
                z-index: -10; // keeps it in background
                
                @include desktop {
                    clip-path: polygon(0 0, 71% 0, 49% 100%, 0% 100%);
                }
                
            }
            
            header a {
                color: white;
                text-decoration: none;
                padding: $padding;
                display: block;
                text-transform: uppercase;
            }
            
        }
        
        main {
            
            @include desktop {
                display: grid;
                grid-template-columns: 50 auto;
                grid-template-areas:
                    "primary card";
            }
            
            section#card { // is this an id within a type?
                background: white;
                padding: 20px;
                margin: 1em auto; // centers
                border-radius: $borders;
                box-shadow: 0 10px 30px rba(0,0,0,.2); // 
                width: 80%;
                
                @include desktop {
                    grid-area: card;
                    height: fit-content;
                    align-self: center;
                    margin: 1em;
                }
                
                
                ul {
                    list-style-type: none; // gets rid of bullets
                    margin: 0;
                    padding 0;
                    
                    li {
                        margin-bottom: 10px;
                        
                        span {
                            position: absolute;
                            width: 30px;
                            height: 30px;
                            background-color: color(primary-light);
                            border-radius: 50%;
                            margin-right: 10px;
                        }
                        
                        strong {
                            display: inline-block;
                            margin-left: max(40px);
                            margin-top: 10px;
                        }
                        
                        
                    }
                    
                }
                
            }
            
            
            section#primary {
                color: white;
                padding: $padding;
                text-align: center;
                
                @include desktop {
                    grid-area: primary;
                    text-align: left;
                    margin: 4em 0 0 4em; pushing away to the side of the browser
                }
                
                
                h1 {
                    font-size: 3em;
                    margin-top: 10px;
                    text-transform: uppercase;
                }
                
                p {
                    font-size: 1.4em;
                }
                
                a {
                    color: color(primary-dark);
                    border-radius: $borders;
                    text-transform: uppercase;
                    text-decoration: none;
                    font-weight: bold;
                    background-color: color(accent);
                    display: block;
                    text-align: center;
                    margin: 50px auto 0 auto;
                    padding: $padding;
                }
                
            }
            
        }
        
        
        
        .textColor {
            color: map-get($colors, accent);
            z-index: 10;
        }
        
